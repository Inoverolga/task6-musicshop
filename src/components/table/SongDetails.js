import { useState } from "react";
import { Row, Col, Button, Card } from "react-bootstrap";
import useMusicPlayer from "../../hooks/useMusicPlayer";

const SongDetails = ({ song }) => {
  const { playPreview, stopPlayback, isPlaying } = useMusicPlayer();
  // playPreview - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  // stopPlayback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  // isPlaying - —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –∏–≥—Ä–∞–µ—Ç –ª–∏ –º—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å
  const [currentSongId, setCurrentSongId] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç

  const handlePlay = () => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if (isPlaying && currentSongId === song.id) {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      stopPlayback();
    } else {
      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç –¥—Ä—É–≥–∞—è –ø–µ—Å–Ω—è
      if (isPlaying) {
        stopPlayback();
      }
      playPreview(song); // –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏
      setCurrentSongId(song.id); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–∞—é—â–µ–π –ø–µ—Å–Ω–∏
    }
  };

  const generateAlbumCover = (song) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Unsplash –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const musicKeywords = [
      "music",
      "guitar",
      "piano",
      "microphone",
      "headphones",
      "vinyl",
      "concert",
      "dj",
      "singer",
      "drums",
      "studio",
      "music-studio",
      "recording",
      "live-music",
      "band",
      "orchestra",
    ];

    const keyword = musicKeywords[song.id % musicKeywords.length];
    const unsplashUrl = `https://source.unsplash.com/400x400/?${keyword}&sig=${song.id}`;

    return {
      backgroundImage: `linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(${unsplashUrl})`,
      backgroundSize: "cover",
      backgroundPosition: "center",
      backgroundBlendMode: "darken",
      minHeight: "200px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      boxShadow: "0 8px 25px rgba(0,0,0,0.15)",
      border: "1px solid rgba(255,255,255,0.1)",
    };
  };

  const generateReview = (song) => {
    // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–≤—å—é:
    const reviews = [
      `"${song.title}" is an incredible track that showcases ${
        song.artist
      }'s unique style. The ${song.genre.toLowerCase()} elements blend perfectly with the melodic structure.`,
      `A masterpiece from ${song.artist}! ${song.title} demonstrates why they're one of the most innovative artists in the ${song.genre} scene.`,
      `This ${song.genre.toLowerCase()} gem from ${song.artist}'s ${
        song.album === "Single" ? "latest release" : song.album
      } is absolutely captivating.`,
    ];
    return reviews[song.id % reviews.length];
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –ø–µ—Å–Ω—è
  const isThisSongPlaying = isPlaying && currentSongId === song.id;
  // –ï—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç –ø–µ—Å–Ω—è #5, —Ç–æ —Ç–æ–ª—å–∫–æ —É –Ω–µ–µ –±—É–¥–µ—Ç "Stop Preview",
  // –∞ —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - "Play Preview"

  return (
    <Card
      className="m-3 border-0"
      style={{ boxShadow: "0 8px 32px rgba(0, 0, 0, 0.2)" }}
    >
      <Card.Body className="p-0">
        <Row className="align-items-stretch">
          <Col md={4}>
            <div
              className="album-cover rounded p-4 text-white text-center d-flex flex-column justify-content-center"
              style={generateAlbumCover(song)}
            >
              <div className="text-center">
                <div
                  className="music-icon mb-3"
                  style={{
                    fontSize: "3rem",
                    opacity: 0.9,
                    filter: "drop-shadow(2px 2px 4px rgba(0,0,0,0.5))",
                  }}
                >
                  {
                    [
                      "üéµ",
                      "üé∏",
                      "üéπ",
                      "üé§",
                      "üéß",
                      "ü•Å",
                      "üé∑",
                      "üé∫",
                      "üéª",
                      "üìª",
                    ][song.id % 10]
                  }
                </div>
                <h5 className="fw-bold mb-2 text-shadow">{song.title}</h5>
                <p className="mb-1 text-shadow">{song.artist}</p>
                {song.album !== "Single" && (
                  <small className="opacity-90 text-shadow">{song.album}</small>
                )}
              </div>
            </div>
          </Col>
          <Col md={8}>
            <div className="d-flex flex-column h-100">
              <div className="mb-4">
                <Button
                  variant={
                    isThisSongPlaying ? "outline-danger" : "outline-success"
                  }
                  size="lg"
                  onClick={handlePlay}
                >
                  {isThisSongPlaying ? "‚èπÔ∏è Stop Preview" : "‚ñ∂Ô∏è Play Preview"}
                </Button>
              </div>
              <div className="flex-grow-1">
                <h6 className="text-muted mb-3">Review</h6>
                <p className="text-muted lh-base">{generateReview(song)}</p>
              </div>
            </div>
          </Col>
        </Row>
      </Card.Body>
    </Card>
  );
};

export default SongDetails;

//–¢–µ–∫—Å—Ç —Ä–µ–≤—å—é (Review Text) - —ç—Ç–æ —Ç–µ–∫—Å—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –∏–ª–∏ –æ—Ç–∑—ã–≤–∞ –æ –ø–µ—Å–Ω–µ, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.
